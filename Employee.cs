//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticeActivityTraking
{
    using Microsoft.Office.Interop.Excel;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Data.SqlClient;
    using System.Linq;

    public partial class Employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employee()
        {
            this.EmployeeToActivities = new HashSet<EmployeeToActivity>();
            this.Posts = new HashSet<Post>();
            this.RequestHelps = new HashSet<RequestHelp>();
        }
        [Display(Name = "Номер паспорта")]
        [Required(ErrorMessage = "Введите номер паспорта")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "Неверный формат паспорта. Введите 10 цифр без пробела (первые 4 - серия паспорта, следующие 6 - серия паспорта)")]
        public string PassportID { get; set; }
        [Display(Name = "Имя")]
        [Required(ErrorMessage = "Введите имя")]
        [MinLength(2, ErrorMessage = "Минимальная длина имени - 2 символа")]
        [MaxLength(50, ErrorMessage = "Максимальная длина имени - 50 символов")]
        public string Name { get; set; }
        [Display(Name = "Фамилия")]
        [Required(ErrorMessage = "Введите фамилию")]
        [MinLength(2, ErrorMessage = "Минимальная длина фамилии - 2 символа")]
        [MaxLength(50, ErrorMessage = "Максимальная длина фамилии - 50 символов")]
        public string Surname { get; set; }
        [Display(Name = "Отчество")]
        [MaxLength(50, ErrorMessage = "Максимальная длина отчества - 50 символов")]
        public string Patronymic { get; set; }
        [Display(Name = "Пол")]
        public int GenderID { get; set; }
        [Display(Name = "Дата рождения")]
        [Required(ErrorMessage = "Введите дату рождения")]
        [DataType(DataType.Date)]
        [DateOfBirth(MinAge = 16, MaxAge = 90, ErrorMessage = "Введено неккоретное значение даты рождения. Минимальный возраст работника - 16 лет, максимальный - 90 лет.")]
        public System.DateTime Birthdate { get; set; }
        [Display(Name = "Электронная почта")]
        [RegularExpression(@"^[-\w.]+@([A-z0-9][-A-z0-9]+\.)+[A-z]{2,4}$", ErrorMessage = "Неверный формат электронной почты! Верный: 123qwe@mail.ru")]
        public string Login { get; set; }
        [Display(Name = "Пароль")]
        [MinLength(6, ErrorMessage = "Минимальная длина пароля - 6 символа")]
        [MaxLength(10, ErrorMessage = "Максимальная длина пароля - 10 символов")]
        public string Password { get; set; }
        [Display(Name = "Телефон")]
        [Required(ErrorMessage = "Введите номер телефона")]
        [RegularExpression(@"^((\+7|7|8)+([0-9]){10})$", ErrorMessage = "Неверный формат номера телефона! Верный: +79194490499 или 89194490499")]
        public string Phone { get; set; }
    
        public virtual CodifierGender CodifierGender { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<EmployeeToActivity> EmployeeToActivities { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Post> Posts { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<RequestHelp> RequestHelps { get; set; }

        public class DateOfBirthAttribute : ValidationAttribute
        {
            public int MinAge { get; set; }
            public int MaxAge { get; set; }

            public override bool IsValid(object value)
            {
                if (value == null)
                    return true;

                var val = (DateTime)value;

                if (val.AddYears(MinAge) > DateTime.Now)
                    return false;

                return (val.AddYears(MaxAge) > DateTime.Now);
            }
        }
        public static string cs = @"data source=(localdb)\MSSQLLocalDB;initial catalog=ActivityTracking;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework";
        public int GetScore(string id)
        {
            string sql = $"SELECT Sum(CodA.Score) as Балл FROM Employee as E INNER JOIN EmployeeToActivity as EtoA  ON E.PassportID = EtoA.PassportID INNER JOIN Activity as A  ON A.ActivityID = EtoA.ActivityID INNER JOIN CodifierActivity as CodA  ON CodA.ActivityTypeID = A.ActivityTypeID WHERE (E.PassportID = N'{id}' AND A.ActivityStatusID <> 2 AND A.ActivityStatusID <> 1)";
            try 
            {
                SqlConnection cn = new SqlConnection(cs);
                cn.Open();
                var cmd = new SqlCommand(sql, cn);
                object result = cmd.ExecuteScalar();
                int a = Convert.ToInt32(result);
                cn.Close();
                return a;
            }
            catch 
            {
                return 0;
            }

        }
        public int GetLevel(string id)
        {
            int sc = GetScore(id);
            return sc / 10;
        }
        public string GetPrize(string id)
        {
            int level = GetLevel(id);
            return ((level / 5) * 0.5).ToString() + "%";
        }


    }
}
